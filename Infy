// Create students
CREATE (:Student {name: 'Alice', college: 'College A', place: 'Place 1'})
CREATE (:Student {name: 'Bob', college: 'College B', place: 'Place 2'})
CREATE (:Student {name: 'Carol', college: 'College A', place: 'Place 1'})
CREATE (:Student {name: 'Dave', college: 'College C', place: 'Place 1'})
CREATE (:Student {name: 'Eve', college: 'College D', place: 'Place 3'})
CREATE (:Student {name: 'Frank', college: 'College E', place: 'Place 2'})
CREATE (:Student {name: 'Grace', college: 'College F', place: 'Place 2'})
CREATE (:Student {name: 'Henry', college: 'College G', place: 'Place 3'})
CREATE (:Student {name: 'Ivy', college: 'College A', place: 'Place 1'})
CREATE (:Student {name: 'Jack', college: 'College B', place: 'Place 2'})
CREATE (:Student {name: 'Kelly', college: 'College H', place: 'Place 3'})

// Create company
CREATE (:Company {name: 'XYZ Company', place: 'Place 1'})

// Create relationships
MATCH (s:Student {name: 'Alice'}), (c:Company {place: 'Place 1'})
CREATE (s)-[:INTERNSHIP_AT]->(c)

MATCH (s:Student {name: 'Carol'}), (c:Company {place: 'Place 1'})
CREATE (s)-[:INTERNSHIP_AT]->(c)

MATCH (s:Student {name: 'Dave'}), (c:Company {place: 'Place 1'})
CREATE (s)-[:INTERNSHIP_AT]->(c)

MATCH (s:Student {name: 'Ivy'}), (c:Company {place: 'Place 1'})
CREATE (s)-[:INTERNSHIP_AT]->(c)

MATCH (s:Student {name: 'Bob'}), (c:Company {place: 'Place 2'})
CREATE (s)-[:INTERNSHIP_AT]->(c)

MATCH (s:Student {name: 'Frank'}), (c:Company {place: 'Place 2'})
CREATE (s)-[:INTERNSHIP_AT]->(c)

MATCH (s:Student {name: 'Grace'}), (c:Company {place: 'Place 2'})
CREATE (s)-[:INTERNSHIP_AT]->(c)

MATCH (s:Student {name: 'Eve'}), (c:Company {place: 'Place 3'})
CREATE (s)-[:INTERNSHIP_AT]->(c)

MATCH (s:Student {name: 'Henry'}), (c:Company {place: 'Place 3'})
CREATE (s)-[:INTERNSHIP_AT]->(c)

MATCH (s:Student {name: 'Kelly'}), (c:Company {place: 'Place 3'})
CREATE (s)-[:INTERNSHIP_AT]->(c)



<!DOCTYPE html>
<html>
<head>
  <title>Neo4j Visualization with Vis.js</title>
  <style type="text/css">
    #visualization {
      height: 600px;
      width: 100%;
    }
  </style>
</head>
<body>
  <div id="visualization"></div>
  <script src="https://unpkg.com/vis-network@10.8.1/dist/vis-network.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="your_script.js"></script>
</body>
</html>






// Create a new Vis.js DataSet for nodes and edges
var nodes = new vis.DataSet();
var edges = new vis.DataSet();

// Connect to Neo4j and retrieve data
var driver = neo4j.driver('bolt://localhost', neo4j.auth.basic('username', 'password'));
var session = driver.session();
session.run('MATCH (n)-[r]->(m) RETURN n, r, m')
  .then(function(result) {
    result.records.forEach(function(record) {
      // Create a Vis.js node object from Neo4j node data
      var neo4jNode = record.get('n');
      var visNode = {
        id: neo4jNode.identity.toString(),
        label: neo4jNode.labels[0],
        title: JSON.stringify(neo4jNode.properties),
      };
      nodes.add(visNode);

      // Create a Vis.js edge object from Neo4j relationship data
      var neo4jRelationship = record.get('r');
      var visEdge = {
        id: neo4jRelationship.identity.toString(),
        from: neo4jRelationship.start.toString(),
        to: neo4jRelationship.end.toString(),
        label: neo4jRelationship.type,
        title: JSON.stringify(neo4jRelationship.properties),
      };
      edges.add(visEdge);
    });

    // Create a network using the container and data
    var container = document.getElementById('visualization');
    var data = { nodes: nodes, edges: edges };
    var options = {}; // Customize the visualization options as needed
    var network = new vis.Network(container, data, options);
  })
  .catch(function(error) {
    console.error('Error connecting to Neo4j:', error);
  })
  .finally(function() {
    session.close();
    driver.close();
  });


