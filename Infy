// Create students
CREATE (:Student {name: 'Alice', college: 'College A', place: 'Place 1'})
CREATE (:Student {name: 'Bob', college: 'College B', place: 'Place 2'})
CREATE (:Student {name: 'Carol', college: 'College A', place: 'Place 1'})
CREATE (:Student {name: 'Dave', college: 'College C', place: 'Place 1'})
CREATE (:Student {name: 'Eve', college: 'College D', place: 'Place 3'})
CREATE (:Student {name: 'Frank', college: 'College E', place: 'Place 2'})
CREATE (:Student {name: 'Grace', college: 'College F', place: 'Place 2'})
CREATE (:Student {name: 'Henry', college: 'College G', place: 'Place 3'})
CREATE (:Student {name: 'Ivy', college: 'College A', place: 'Place 1'})
CREATE (:Student {name: 'Jack', college: 'College B', place: 'Place 2'})
CREATE (:Student {name: 'Kelly', college: 'College H', place: 'Place 3'})

// Create company
CREATE (:Company {name: 'XYZ Company', place: 'Place 1'})

// Create relationships
MATCH (s:Student {name: 'Alice'}), (c:Company {place: 'Place 1'})
CREATE (s)-[:INTERNSHIP_AT]->(c)

MATCH (s:Student {name: 'Carol'}), (c:Company {place: 'Place 1'})
CREATE (s)-[:INTERNSHIP_AT]->(c)

MATCH (s:Student {name: 'Dave'}), (c:Company {place: 'Place 1'})
CREATE (s)-[:INTERNSHIP_AT]->(c)

MATCH (s:Student {name: 'Ivy'}), (c:Company {place: 'Place 1'})
CREATE (s)-[:INTERNSHIP_AT]->(c)

MATCH (s:Student {name: 'Bob'}), (c:Company {place: 'Place 2'})
CREATE (s)-[:INTERNSHIP_AT]->(c)

MATCH (s:Student {name: 'Frank'}), (c:Company {place: 'Place 2'})
CREATE (s)-[:INTERNSHIP_AT]->(c)

MATCH (s:Student {name: 'Grace'}), (c:Company {place: 'Place 2'})
CREATE (s)-[:INTERNSHIP_AT]->(c)

MATCH (s:Student {name: 'Eve'}), (c:Company {place: 'Place 3'})
CREATE (s)-[:INTERNSHIP_AT]->(c)

MATCH (s:Student {name: 'Henry'}), (c:Company {place: 'Place 3'})
CREATE (s)-[:INTERNSHIP_AT]->(c)

MATCH (s:Student {name: 'Kelly'}), (c:Company {place: 'Place 3'})
CREATE (s)-[:INTERNSHIP_AT]->(c)



<!DOCTYPE html>
<html>
<head>
  <title>Neo4j Visualization with Vis.js</title>
  <style type="text/css">
    #visualization {
      height: 600px;
      width: 100%;
    }
  </style>
</head>
<body>
  <div id="visualization"></div>
  <script src="https://unpkg.com/vis-network@10.8.1/dist/vis-network.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="your_script.js"></script>
</body>
</html>






// Create a new Vis.js DataSet for nodes and edges
var nodes = new vis.DataSet();
var edges = new vis.DataSet();

// Connect to Neo4j and retrieve data
var driver = neo4j.driver('bolt://localhost', neo4j.auth.basic('username', 'password'));
var session = driver.session();
session.run('MATCH (n)-[r]->(m) RETURN n, r, m')
  .then(function(result) {
    result.records.forEach(function(record) {
      // Create a Vis.js node object from Neo4j node data
      var neo4jNode = record.get('n');
      var visNode = {
        id: neo4jNode.identity.toString(),
        label: neo4jNode.labels[0],
        title: JSON.stringify(neo4jNode.properties),
      };
      nodes.add(visNode);

      // Create a Vis.js edge object from Neo4j relationship data
      var neo4jRelationship = record.get('r');
      var visEdge = {
        id: neo4jRelationship.identity.toString(),
        from: neo4jRelationship.start.toString(),
        to: neo4jRelationship.end.toString(),
        label: neo4jRelationship.type,
        title: JSON.stringify(neo4jRelationship.properties),
      };
      edges.add(visEdge);
    });

    // Create a network using the container and data
    var container = document.getElementById('visualization');
    var data = { nodes: nodes, edges: edges };
    var options = {}; // Customize the visualization options as needed
    var network = new vis.Network(container, data, options);
  })
  .catch(function(error) {
    console.error('Error connecting to Neo4j:', error);
  })
  .finally(function() {
    session.close();
    driver.close();
  });








<!DOCTYPE html>
<html>
<head>
  <title>Neo4j Visualization with vis.js</title>
  <style type="text/css">
    #visualization {
      width: 100%;
      height: 500px;
    }
  </style>
  <script type="text/javascript" src="https://unpkg.com/vis-network/standalone/umd/vis-network.min.js"></script>
</head>
<body>
  <div id="visualization"></div>

  <script type="text/javascript">
    // Create a new network instance
    var container = document.getElementById("visualization");
    var data = {
      nodes: [],
      edges: []
    };

    // Neo4j connection configuration
    var config = {
      container: container,
      serverUrl: "bolt://localhost:7687",
      serverUser: "neo4j",
      serverPassword: "your_password",
      labels: {
        "Student": {
          caption: "name"
        }
      },
      relationships: {
        "INTERNSHIP_AT": {
          thickness: "weight"
        }
      }
    };

    // Connect to Neo4j and retrieve data
    var driver = neo4j.v1.driver(config.serverUrl, neo4j.v1.auth.basic(config.serverUser, config.serverPassword));
    var session = driver.session();
    var cypherQuery = 'MATCH (n) RETURN n';
    session.run(cypherQuery)
      .then(function(result) {
        result.records.forEach(function(record) {
          var node = record.get("n");
          var nodeId = node.identity.toString();
          var nodeLabel = node.labels[0];
          var nodeProps = node.properties;
          data.nodes.push({ id: nodeId, label: nodeLabel, title: nodeProps.name });

          var relationships = node.relationships;
          relationships.forEach(function(relationship) {
            var relationshipId = relationship.identity.toString();
            var relationshipType = relationship.type;
            var relationshipProps = relationship.properties;
            var sourceNodeId = relationship.start.toString();
            var targetNodeId = relationship.end.toString();
            data.edges.push({ id: relationshipId, from: sourceNodeId, to: targetNodeId, label: relationshipType, title: relationshipProps.weight });
          });
        });

        // Create the network visualization
        var options = {};
        var network = new vis.Network(container, data, options);
      })
      .catch(function(error) {
        console.error("Error retrieving data from Neo4j: ", error);
      })
      .finally(function() {
        session.close();
        driver.close();
      });
  </script>
</body>
</html>








CREATE (:Student {name: "John Doe", college: "ABC University", place: "City A"})
CREATE (:Student {name: "Jane Smith", college: "XYZ College", place: "City B"})
CREATE (:Student {name: "David Johnson", college: "PQR Institute", place: "City C"})
CREATE (:Student {name: "Sarah Brown", college: "LMN University", place: "City D"})
CREATE (:Student {name: "Michael Wilson", college: "EFG College", place: "City E"})
CREATE (:Student {name: "Emily Davis", college: "UVW Institute", place: "City F"})
CREATE (:Student {name: "Daniel Taylor", college: "HIJ University", place: "City G"})
CREATE (:Student {name: "Olivia Lee", college: "KLM College", place: "City H"})
CREATE (:Student {name: "Matthew Clark", college: "NOP Institute", place: "City I"})
CREATE (:Student {name: "Sophia Lewis", college: "QRS University", place: "City J"})
CREATE (:Student {name: "James Martinez", college: "TUV College", place: "City K"})
CREATE (:Student {name: "Ava Hall", college: "XYZ Institute", place: "City L"})
CREATE (:Student {name: "William Mitchell", college: "ABC University", place: "City M"})
CREATE (:Student {name: "Isabella Scott", college: "PQR College", place: "City N"})
CREATE (:Student {name: "Daniel Thompson", college: "LMN Institute", place: "City O"})
CREATE (:Student {name: "Mia Walker", college: "EFG University", place: "City P"})
CREATE (:Student {name: "Alexander Adams", college: "UVW College", place: "City Q"})
CREATE (:Student {name: "Sofia Hill", college: "HIJ Institute", place: "City R"})
CREATE (:Student {name: "Ethan Turner", college: "KLM University", place: "City S"})
CREATE (:Student {name: "Charlotte Baker", college: "NOP College", place: "City T"})

MATCH (s1:Student),(s2:Student)
WHERE s1 <> s2
WITH s1, s2
LIMIT 10
CREATE (s1)-[:INTERNSHIP_AT]->(s2)









CREATE (:Student {name: "John Doe", college: "ABC University", place: "City A"})
CREATE (:Student {name: "Jane Smith", college: "XYZ College", place: "City B"})
CREATE (:Student {name: "David Johnson", college: "PQR Institute", place: "City C"})
CREATE (:Student {name: "Sarah Brown", college: "LMN University", place: "City D"})
CREATE (:Student {name: "Michael Wilson", college: "EFG College", place: "City E"})
CREATE (:Student {name: "Emily Davis", college: "UVW Institute", place: "City F"})
CREATE (:Student {name: "Daniel Taylor", college: "HIJ University", place: "City G"})
CREATE (:Student {name: "Olivia Lee", college: "KLM College", place: "City H"})
CREATE (:Student {name: "Matthew Clark", college: "NOP Institute", place: "City I"})
CREATE (:Student {name: "Sophia Lewis", college: "QRS University", place: "City J"})
CREATE (:Student {name: "James Martinez", college: "TUV College", place: "City K"})
CREATE (:Student {name: "Ava Hall", college: "XYZ Institute", place: "City L"})
CREATE (:Student {name: "William Mitchell", college: "ABC University", place: "City M"})
CREATE (:Student {name: "Isabella Scott", college: "PQR College", place: "City N"})
CREATE (:Student {name: "Daniel Thompson", college: "LMN Institute", place: "City O"})
CREATE (:Student {name: "Mia Walker", college: "EFG University", place: "City P"})
CREATE (:Student {name: "Alexander Adams", college: "UVW College", place: "City Q"})
CREATE (:Student {name: "Sofia Hill", college: "HIJ Institute", place: "City R"})
CREATE (:Student {name: "Ethan Turner", college: "KLM University", place: "City S"})
CREATE (:Student {name: "Charlotte Baker", college: "NOP College", place: "City T"})

MATCH (s1:Student {name: "John Doe"}), (s2:Student {name: "Jane Smith"})
CREATE (s1)-[:INTERNSHIP_AT]->(s2)

MATCH (s1:Student {name: "John Doe"}), (s3:Student {name: "David Johnson"})
CREATE (s1)-[:INTERNSHIP_AT]->(s3)

MATCH (s1:Student {name: "John Doe"}), (s4:Student {name: "Sarah Brown"})
CREATE (s1)-[:INTERNSHIP_AT]->(s4)

MATCH (s1:Student {name: "John Doe"}), (s5:Student {name: "Michael Wilson"})
CREATE (s1)-[:INTERNSHIP_AT]->(s5)

MATCH (s2:Student {name: "Jane Smith"}), (s6:Student {name: "Emily Davis"})
CREATE (s2)-[:INTERNSHIP_AT]->(s6)

MATCH (s2:Student {name: "Jane Smith"}), (s7:Student {name: "Daniel Taylor"})
CREATE (s2)-[:INTERNSHIP_AT]->(s7)

MATCH (s2:Student {name: "Jane Smith"}), (s8:Student {name: "Olivia Lee"})
CREATE (s2






MATCH (a:Person {name: "Alice"}), (b:Person {name: "Bob"})
CREATE (a)-[:FRIEND]->(b)

MATCH (a:Person {name: "Alice"}), (c:Person {name: "Charlie"})
CREATE (a)-[:FRIEND]->(c)

MATCH (a:Person {name: "Bob"}), (d:Person {name: "David"})
CREATE (a)-[:FRIEND]->(d)

MATCH (b:Person {name: "Bob"}), (e:Person {name: "Eve"})
CREATE (b)-[:FRIEND]->(e)

MATCH (c:Person {name: "Charlie"}), (f:Person {name: "Frank"})
CREATE (c)-[:FRIEND]->(f)

MATCH (d:Person {name: "David"}), (g:Person {name: "Grace"})
CREATE (d)-[:FRIEND]->(g)

MATCH (e:Person {name: "Eve"}), (h:Person {name: "Henry"})
CREATE (e)-[:FRIEND]->(h)

MATCH (f:Person {name: "Frank"}), (i:Person {name: "Ivy"})
CREATE (f)-[:FRIEND]->(i)

MATCH (g:Person {name: "Grace"}), (j:Person {name: "Jack"})
CREATE (g)-[:FRIEND]->(j)

MATCH (h:Person {name: "Henry"}), (k:Person {name: "Karen"})
CREATE (h)-[:FRIEND]->(k)

MATCH (i:Person {name: "Ivy"}), (l:Person {name: "Liam"})
CREATE (i)-[:FRIEND]->(l)

MATCH (j:Person {name: "Jack"}), (m:Person {name: "Mia"})
CREATE (j)-[:FRIEND]->(m)

MATCH (k:Person {name: "Karen"}), (n:Person {name: "Nathan"})
CREATE (k)-[:FRIEND]->(n)

MATCH (l:Person {name: "Liam"}), (o:Person {name: "Olivia"})
CREATE (l)-[:FRIEND]->(o)

MATCH (m:Person {name: "Mia"}), (p:Person {name: "Nathan"})
CREATE (m)-[:FRIEND]->(p)


11






MATCH (a:Person {name: "Alice"}), (b:Person {name: "Bob"})
CREATE (a)-[:FRIEND]->(b),
       (a)-[:COLLEAGUE]->(b),
       (a)-[:NEIGHBOR]->(b)

MATCH (a:Person {name: "Alice"}), (c:Person {name: "Charlie"})
CREATE (a)-[:FRIEND]->(c),
       (a)-[:SIBLING]->(c),
       (a)-[:CO-WORKER]->(c)

MATCH (a:Person {name: "Bob"}), (d:Person {name: "David"})
CREATE (a)-[:FRIEND]->(d),
       (a)-[:COLLEAGUE]->(d),
       (a)-[:CLASSMATE]->(d)

MATCH (b:Person {name: "Bob"}), (e:Person {name: "Eve"})
CREATE (b)-[:FRIEND]->(e),
       (b)-[:NEIGHBOR]->(e),
       (b)-[:CO-WORKER]->(e)

MATCH (c:Person {name: "Charlie"}), (f:Person {name: "Frank"})
CREATE (c)-[:FRIEND]->(f),
       (c)-[:SIBLING]->(f),
       (c)-[:COLLEAGUE]->(f)

MATCH (d:Person {name: "David"}), (g:Person {name: "Grace"})
CREATE (d)-[:FRIEND]->(g),
       (d)-[:CO-WORKER]->(g),
       (d)-[:CLASSMATE]->(g)

MATCH (e:Person {name: "Eve"}), (h:Person {name: "Henry"})
CREATE (e)-[:FRIEND]->(h),
       (e)-[:NEIGHBOR]->(h),
       (e)-[:SIBLING]->(h)

MATCH (f:Person {name: "Frank"}), (i:Person {name: "Ivy"})
CREATE (f)-[:FRIEND]->(i),
       (f)-[:COLLEAGUE]->(i),
       (f)-[:NEIGHBOR]->(i)

MATCH (g:Person {name: "Grace"}), (j:Person {name: "Jack"})
CREATE (g)-[:FRIEND]->(j),
       (g)-[:CLASSMATE]->(j),
       (g)-[:CO-WORKER]->(j)

MATCH (h:Person {name: "Henry"}), (k:Person {name: "Karen"})
CREATE (h)-[:FRIEND]->(k),
       (h)-[:NEIGHBOR]->(k),
       (h)-[:COLLEAGUE]->(k)

MATCH (i:Person {name: "Ivy"}), (l:Person {name: "Liam"})
CREATE (i)-[:FRIEND]->(l),
       (i)-[:SIBLING]->(l),
       (i)-[:CLASSMATE]->(l)

MATCH (j:Person {name: "Jack"}), (m:Person {name: "Mia"})
CREATE (j)-[:FRIEND]->(m),
       (j)-[:CO-WORKER]->(m),
       (j)-[:NEIGHBOR]->(m)

MATCH (k:Person {name: "Karen"}), (n:Person {name: "Nathan"})
CREATE (k)-[:FRIEND]->(n),
       (k)-[:COLLEAGUE]->(n),
       (k)-[:SIBLING]->(n)

MATCH (l:Person {name: "Liam"}), (o:Person {name: "Olivia"})
CREATE (l)-[:FRIEND]->(o),
       (l)-[:NEIGHBOR]->(o),
       (l)-[:CLASSMATE]->(o)

MATCH (m:Person {name: "Mia"}), (p:Person {name: "Nathan"})
CREATE (m)-[:FRIEND]->(p),
       (m)-[:CO-WORKER]->(p),
       (m)-[:SIBLING]->(p)













<!DOCTYPE html>
<html>
<head>
  <title>Neo4j Visualization with Vis.js</title>
  <style type="text/css">
    #visualization {
      width: 800px;
      height: 600px;
      border: 1px solid lightgray;
    }
  </style>
</head>
<body>
  <div id="visualization"></div>
  <script src="https://unpkg.com/vis-network/standalone/umd/vis-network.min.js"></script>
  <script>
    // Neo4j data
    var nodes = [
      { id: 1, label: 'Alice' },
      { id: 2, label: 'Bob' },
      { id: 3, label: 'Charlie' },
      { id: 4, label: 'David' },
      { id: 5, label: 'Eve' },
      { id: 6, label: 'Frank' },
      { id: 7, label: 'Grace' },
      { id: 8, label: 'Henry' },
      { id: 9, label: 'Ivy' },
      { id: 10, label: 'Jack' },
      { id: 11, label: 'Karen' },
      { id: 12, label: 'Liam' },
      { id: 13, label: 'Mia' },
      { id: 14, label: 'Nathan' },
      { id: 15, label: 'Olivia' }
    ];

    var edges = [
      { from: 1, to: 2, label: 'FRIEND' },
      { from: 1, to: 3, label: 'FRIEND' },
      { from: 1, to: 4, label: 'FRIEND' },
      { from: 2, to: 3, label: 'FRIEND' },
      { from: 2, to: 4, label: 'FRIEND' },
      { from: 2, to: 5, label: 'FRIEND' },
      { from: 3, to: 4, label: 'FRIEND' },
      { from: 3, to: 6, label: 'FRIEND' },
      { from: 3, to: 7, label: 'FRIEND' },
      { from: 4, to: 5, label: 'FRIEND' },
      { from: 4, to: 6, label: 'FRIEND' },
      { from: 4, to: 7, label: 'FRIEND' },
      { from: 5, to: 6, label: 'FRIEND' },
      { from: 5, to: 7, label: 'FRIEND' },
      { from: 5, to: 8, label: 'FRIEND' },
      { from: 6, to: 7, label: 'FRIEND' },
      { from: 6, to: 8, label: 'FRIEND' },
      { from: 6, to: 9, label: 'FRIEND' },
      { from: 7, to: 8, label: 'FRIEND' },
      { from: 7, to: 9, label: 'FRIEND' },
      { from: 7, to: 10, label: 'FRIEND' },
      { from: 8, to: 9, label: 'FRIEND' },
      { from: 8, to: 10, label: 'FRIEND' },
      { from: 8, to: 11, label: 'FRIEND' },
      { from: 9, to: 10, label: 'FRIEND' },
      { from: 9, to: 11, label: 'FRIEND' },
      { from: 9, to: 12, label: 'FRIEND' },
      { from: 10, to: 11, label: 'FRIEND' },
      { from: 10, to: 12, label: 'FRIEND' },
      { from: 10, to: 13, label: 'FRIEND' },
      { from: 11, to: 12, label: 'FRIEND' },
      { from: 11, to: 13, label: 'FRIEND' },
      { from: 11, to: 14, label: 'FRIEND' },
      { from: 12, to: 13, label: 'FRIEND' },
      { from: 12, to: 14, label: 'FRIEND' },
      { from: 12, to: 15, label: 'FRIEND' },
      { from: 13, to: 14, label: 'FRIEND' },
      { from: 13, to: 15, label: 'FRIEND' },
      { from: 14, to: 15, label: 'FRIEND' }
    ];

    var data = {
      nodes: nodes,
      edges: edges
    };

    // Visualization options
    var options = {
      nodes: {
        shape: 'dot',
        size: 30,
        font: {
          size: 14,
          color: '#ffffff'
        },
        borderWidth: 2
      },
      edges: {
        width: 2
      }
    };

    // Create a network
    var container = document.getElementById('visualization');
    var network = new vis.Network(container, data, options);
  </script>
</body>
</html>










<!DOCTYPE html>
<html>
<head>
  <title>Neo4j Visualization with Vis.js</title>
  <style type="text/css">
    #visualization {
      width: 800px;
      height: 600px;
      border: 1px solid lightgray;
    }
  </style>
</head>
<body>
  <div id="visualization"></div>
  <script src="https://unpkg.com/vis-network/standalone/umd/vis-network.min.js"></script>
  <script src="data.js"></script>
  <script src="main.js"></script>
</body>
</html>




var nodes = [
  { id: 1, label: 'Alice' },
  { id: 2, label: 'Bob' },
  { id: 3, label: 'Charlie' },
  { id: 4, label: 'David' },
  { id: 5, label: 'Eve' },
  { id: 6, label: 'Frank' },
  { id: 7, label: 'Grace' },
  { id: 8, label: 'Henry' },
  { id: 9, label: 'Ivy' },
  { id: 10, label: 'Jack' },
  { id: 11, label: 'Karen' },
  { id: 12, label: 'Liam' },
  { id: 13, label: 'Mia' },
  { id: 14, label: 'Nathan' },
  { id: 15, label: 'Olivia' }
];

var edges = [
  { from: 1, to: 2, label: 'FRIEND' },
  { from: 1, to: 2, label: 'COLLEAGUE' },
  { from: 1, to: 2, label: 'NEIGHBOR' },
  // Add more relationships here...
];

var data = {
  nodes: nodes,
  edges: edges
};




var container = document.getElementById('visualization');
var options = {
  nodes: {
    shape: 'dot',
    size: 30,
    font: {
      size: 14,
      color: '#ffffff'
    },
    borderWidth: 2
  },
  edges: {
    width: 2
  }
};
var network = new vis.Network(container, data, options);







